// Generated by CodiumAI
import jest, { describe, it, expect } from 'jest';
import { shallow } from 'enzyme'

import { Pins, PopupInfo, SheltersMap } from "../SheltersMap"
describe('SheltersMap', () => {

    // Renders a map with default view state and style.
    it('should render a map with default view state and style', () => {
        // Arrange
        const viewState = {
            latitude: 40.7128,
            longitude: -74.006,
            zoom: 9,
            bearing: 0,
            pitch: 60,
        };
        const setViewState = jest.fn();
        const selectedShelterCardName = "";
        const setPopupInfo = jest.fn();
        const popupInfo = null;

        // Act
        const wrapper = shallow(
            <SheltersMap
                viewState={viewState}
                setViewState={setViewState}
                selectedShelterCardName={selectedShelterCardName}
                setPopupInfo={setPopupInfo}
                popupInfo={popupInfo}
            />
        );

        // Assert
        expect(wrapper.find(Map)).toHaveLength(1);
        expect(wrapper.find(Map).props().initialViewState).toEqual(viewState);
        expect(wrapper.find(Map).props().mapStyle).toBe("mapbox://styles/mapbox/dark-v9");
    });

    // When there are no shelters, the map should still render without markers.
    it('should render the map without markers when there are no shelters', () => {
        // Arrange
        const viewState = {
            latitude: 40.7128,
            longitude: -74.006,
            zoom: 9,
            bearing: 0,
            pitch: 60,
        };
        const setViewState = jest.fn();
        const selectedShelterCardName = "";
        const setPopupInfo = jest.fn();
        const popupInfo = null;

        // Act
        const wrapper = shallow(
            <SheltersMap
                viewState={viewState}
                setViewState={setViewState}
                selectedShelterCardName={selectedShelterCardName}
                setPopupInfo={setPopupInfo}
                popupInfo={popupInfo}
            />
        );

        // Assert
        expect(wrapper.find(Pins)).toHaveLength(0);
    });

    // Displays markers on the map for each shelter.
    it('should render markers for each shelter on the map', () => {
        // Arrange
        const viewState = {
            latitude: 40.7128,
            longitude: -74.006,
            zoom: 9,
            bearing: 0,
            pitch: 60,
        };
        const setViewState = jest.fn();
        const selectedShelterCardName = "";
        const setPopupInfo = jest.fn();
        const popupInfo = null;

        // Act
        const wrapper = shallow(
            <SheltersMap
                viewState={viewState}
                setViewState={setViewState}
                selectedShelterCardName={selectedShelterCardName}
                setPopupInfo={setPopupInfo}
                popupInfo={popupInfo}
            />
        );

        // Assert
        expect(wrapper.find(Pins)).toHaveLength(1);
        expect(wrapper.find(Pins).props().selectedShelterCardName).toBe(selectedShelterCardName);
        expect(wrapper.find(Pins).props().setPopupInfo).toBe(setPopupInfo);
    });

    // Allows the user to click on a marker to view more information about the shelter in a popup.
    it(`should render a map with markers and a 
    popup for each shelter`, () => {
        // Arrange
        const viewState = {
            latitude: 40.7128,
            longitude: -74.006,
            zoom: 9,
            bearing: 0,
            pitch: 60,
        };
        const setViewState = jest.fn();
        const selectedShelterCardName = "";
        const setPopupInfo = jest.fn();
        const popupInfo = null;

        // Act
        const wrapper = shallow(
            <SheltersMap
                viewState={viewState}
                setViewState={setViewState}
                selectedShelterCardName={selectedShelterCardName}
                setPopupInfo={setPopupInfo}
                popupInfo={popupInfo}
            />
        );

        // Assert
        expect(wrapper.find(Map)).toHaveLength(1);
        expect(wrapper.find(Pins)).toHaveLength(1);
        expect(wrapper.find(PopupInfo)).toHaveLength(1);
    });
});
